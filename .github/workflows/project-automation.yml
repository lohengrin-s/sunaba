# .github/workflows/project-automation.yml
name: Move Issue in Project (Org Project v2)

on:
  issues:
    types: [opened, labeled, edited, reopened]

jobs:
  move-issue:
    runs-on: ubuntu-latest
    environment: ActionsSecret
    if: |
      contains(github.event.issue.labels.*.name, 'feature-flag') ||
      contains(github.event.issue.labels.*.name, 'impl-in-progress') ||
      contains(github.event.issue.labels.*.name, 'released-off') ||
      contains(github.event.issue.labels.*.name, 'flag-on') ||
      contains(github.event.issue.labels.*.name, 'removal-scheduled') ||
      contains(github.event.issue.labels.*.name, 'flag-removed')
    steps:
      - name: Generate GitHub App Token
        id: generate-github-app-token
        uses: actions/create-github-app-token@v1
        with:
          app_id: ${{ secrets.ISSUE_IN_PROJECT_TOOL_APP_ID }} # GitHub AppのID
          private_key: ${{ secrets.ISSUE_IN_PROJECT_TOOL_PRIVATE_KEY }} # GitHub Appの秘密鍵

      - name: Get Issue Labels
        id: get_labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.issue.labels.map(l => l.name);
            console.log('labels:', labels);
            core.setOutput('labels', labels.join(','));

      - name: Get Org Project v2 Node ID from project number
        id: get_project_id
        env:
          GITHUB_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          ORG="lohengrin-s" # ←Organization名に置き換え
          PROJECT_NUMBER=1    # ←URLの末尾の数値に置き換え
          PROJECT_ID=$(gh api graphql -f query='query { organization(login: "'$ORG'") { projectV2(number: '$PROJECT_NUMBER') { id } } }' --jq ".data.organization.projectV2.id")
          echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT

      - name: Get Status Field ID and Option IDs
        id: get_status_fields
        env:
          GITHUB_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          ORG="lohengrin-s"
          PROJECT_ID="${{ steps.get_project_id.outputs.project_id }}"
          # StatusフィールドIDと各optionIdを取得
          gh api graphql -F projectId=$PROJECT_ID -f query='query($projectId: ID!) { node(id: $projectId) { ... on ProjectV2 { fields(first: 50) { nodes { ... on ProjectV2SingleSelectField { id name options { id name } } } } } } }' > fields.json
          STATUS_FIELD_ID=$(jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id' fields.json)
          echo "status_field_id=$STATUS_FIELD_ID" >> $GITHUB_OUTPUT
          # 各ラベル名→optionIdのマッピングを環境変数としてエクスポート
          jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | "export OPTION_ID_" + (.name|gsub("[ -]";"_")) + "=\"" + (.id|tostring) + "\""' fields.json >> option_ids.sh
          cat fields.json
          cat option_ids.sh

      - name: Add Issue to Org Project v2
        env:
          GITHUB_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          PROJECT_ID="${{ steps.get_project_id.outputs.project_id }}"
          CONTENT_ID="${{ github.event.issue.node_id }}"
          ADD_ITEM_RESULT=$(gh api graphql -F projectId=$PROJECT_ID -F contentId=$CONTENT_ID -f query='mutation($projectId:ID!, $contentId:ID!) { addProjectV2ItemById(input: {projectId: $projectId, contentId: $contentId}) { item { id } } }')
          echo "[DEBUG] addProjectV2ItemById result: $ADD_ITEM_RESULT"

      - name: Set Project Status via GraphQL
        env:
          GITHUB_TOKEN: ${{ steps.generate-github-app-token.outputs.token }}
        run: |
          set -a
          source option_ids.sh
          set +a

          echo "=== option_ids.shの内容 ==="
          cat option_ids.sh
          echo "=== 環境変数 OPTION_ID_* ==="
          env | grep OPTION_ID_

          LABELS="${{ steps.get_labels.outputs.labels }}"
          PROJECT_ID="${{ steps.get_project_id.outputs.project_id }}"
          STATUS_FIELD_ID="${{ steps.get_status_fields.outputs.status_field_id }}"
          # 最初に一致したラベルのoptionIdを使う
          OPTION_ID=""
          for label in $(echo $LABELS | tr ',' ' '); do
            label_key=$(echo $label | tr ' ' '_' | tr '-' '_')
            eval "oid=\$OPTION_ID_${label_key}"
            echo "label: $label_key → optionId: $oid"
            if [[ -n "$oid" ]]; then
              OPTION_ID="$oid"
              break
            fi
          done
          # optionIdを必ず文字列化
          OPTION_ID="\"$OPTION_ID\""
          echo "=== optionId debug ==="
          echo "LABELS: $LABELS"
          echo "OPTION_ID: $OPTION_ID"
          if [[ -z $OPTION_ID || $OPTION_ID == '""' ]]; then
            echo "No matching optionId for labels: $LABELS"
            exit 0
          fi
          CONTENT_ID="${{ github.event.issue.node_id }}"
          # itemId取得
          ITEM_ID=$(gh api graphql -F projectId=$PROJECT_ID -f query='query($projectId: ID!) { node(id: $projectId) { ... on ProjectV2 { items(first: 100) { nodes { id content { ... on Issue { id } ... on PullRequest { id } } } } } } }' --jq ".data.node.items.nodes[] | select(.content.id==\"$CONTENT_ID\") | .id")
          if [[ -z "$ITEM_ID" ]]; then
            echo "itemId not found for contentId: $CONTENT_ID"
            exit 0
          fi
          echo "OPTION_ID (raw): $OPTION_ID"
          printf "OPTION_ID (printf): %s\n" "$OPTION_ID"
          if [[ $OPTION_ID == \"*\" ]]; then
            echo "OPTION_ID is quoted: $OPTION_ID"
          else
            echo "OPTION_ID is NOT quoted: $OPTION_ID"
          fi
          # GraphQL mutationでStatus更新
          echo "gh api graphql -F projectId=$PROJECT_ID -F itemId=$ITEM_ID -F fieldId=$STATUS_FIELD_ID -F optionId=$OPTION_ID ..."
          gh api graphql -F projectId=$PROJECT_ID -F itemId=$ITEM_ID -F fieldId=$STATUS_FIELD_ID -F optionId=$OPTION_ID -f query='mutation($projectId:ID!, $itemId:ID!, $fieldId:ID!, $optionId: String!) { updateProjectV2ItemFieldValue(input: { projectId: $projectId, itemId: $itemId, fieldId: $fieldId, value: { singleSelectOptionId: $optionId } }) { projectV2Item { id } } }'

      - name: Debug LABELS
        run: echo "LABELS=${{ steps.get_labels.outputs.labels }}"
